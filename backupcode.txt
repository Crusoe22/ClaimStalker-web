config.js
const mongoose = require('mongoose');
const connect = mongoose.connect("mongodb://localhost:27017/Login-tut") //"C:\Program Files\MongoDB\Server\8.0\bin\mongod.exe"    mongoose.connect("mongodb://localhost:27017/Login-tut");

// Check database connected or not
connect.then(() => {
    console.log("Database Connected Successfully");
})
.catch(() => {
    console.log("Database cannot be Connected");
})

// Create Schema for Login
const Loginschema = new mongoose.Schema({
    name: {
        type:String,
        required: true
    },
    password: {
        type: String,
        required: true
    }
});

// collection part
const collection = new mongoose.model("users", Loginschema);

module.exports = collection;


// Claim Data Schema
const ClaimSchema = new mongoose.Schema({
    email: { type: String, required: true },
    name: { type: String, required: true },
    phone: { type: String, required: true },
    policyNumber: { type: String, required: true },
    insuranceCompany: { type: String, required: true },
    claimDate: { type: Date, required: true },
    autoLoss: { type: String, required: true },
    propertyLoss: { type: String, required: true },
    location: { type: String, required: true },
    description: { type: String, required: true }
});

const ClaimCollection = mongoose.model("claimdata", ClaimSchema);

module.exports = { UserCollection: collection, ClaimCollection };










index.js

const express = require("express");
const path = require("path");
const collection = require("./config");
const bcrypt = require('bcrypt');

const app = express();

// convert data into json format
app.use(express.json());

// Static file
app.use(express.static("public"));
app.use(express.static("pages-css"));


app.use(express.urlencoded({ extended: false }));

//use EJS as the view engine
app.set("view engine", "ejs");

app.get('/account-page', (req, res) => {
    res.render('account-page'); // Assuming your EJS file is in the 'pages-html' folder
});

app.get('/claimsubmit-page', (req, res) => {
    res.render('claimsubmit-page'); // Assuming your EJS file is in the 'views' folder
});

app.get('/registerlogin-page', (req, res) => {
    res.render('registerlogin-page'); // Assuming your EJS file is in the 'views' folder
});

app.get('/homepage', (req, res) => {
    res.render('homepage'); // Assuming your EJS file is in the 'views' folder
});

app.get("/login", (req, res) => {
    res.render("login");
});

app.get("/signup", (req, res) => {
    res.render("signup");
});

// Register User
app.post("/signup", async (req, res) => {

    const data = {
        name: req.body.username,
        password: req.body.password
    }

    // Check if the username already exists in the database
    const existingUser = await collection.findOne({ name: data.name });

    if (existingUser) {
        res.send('User already exists. Please choose a different username.');
    } else {
        // Hash the password using bcrypt
        const saltRounds = 10; // Number of salt rounds for bcrypt
        const hashedPassword = await bcrypt.hash(data.password, saltRounds);

        data.password = hashedPassword; // Replace the original password with the hashed one

        const userdata = await collection.insertMany(data);
        console.log(userdata);
    }

});

// Login user 
app.post("/login", async (req, res) => {
    try {
        const check = await collection.findOne({ name: req.body.username });
        if (!check) {
            res.send("User name cannot found")
        }
        // Compare the hashed password from the database with the plaintext password
        const isPasswordMatch = await bcrypt.compare(req.body.password, check.password);
        if (!isPasswordMatch) {
            res.send("wrong Password");
        }
        else {
            res.render("homepage");
        }
    }
    catch {
        res.send("wrong Details");
    }
});



// Claim submit data
const { ClaimCollection } = require("./config");

app.post("/submit-claim", async (req, res) => {
    const claimData = {
        email: req.body.email,
        name: req.body.name,
        phone: req.body.phone,
        policyNumber: req.body.policyNumber,
        insuranceCompany: req.body.insuranceCompany,
        claimDate: req.body.claimDate,
        autoLoss: req.body.autoLoss,
        propertyLoss: req.body.propertyLoss,
        location: req.body.location,
        description: req.body.description
    };

    try {
        const savedClaim = await ClaimCollection.create(claimData);
        console.log("Claim saved successfully:", savedClaim);
        res.send("Claim submitted successfully!");
    } catch (error) {
        console.error("Error saving claim:", error);
        res.status(500).send("An error occurred while submitting your claim.");
    }
});




// Define Port for Application
const port = 5500;
app.listen(port, () => {
    console.log(`Server listening on port ${port}`)
});

